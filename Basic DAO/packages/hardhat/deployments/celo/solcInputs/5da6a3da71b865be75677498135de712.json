{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "contracts/mocks/MockERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\n/**\r\n * @title MockERC20\r\n * @dev A simple ERC20 token for testing DAO governance\r\n */\r\ncontract MockERC20 is ERC20, Ownable {\r\n    /**\r\n     * @dev Constructor that creates initial supply and assigns to deployer\r\n     * @param name Token name\r\n     * @param symbol Token symbol\r\n     * @param initialSupply Initial supply of tokens (in wei)\r\n     */\r\n    constructor(\r\n        string memory name,\r\n        string memory symbol,\r\n        uint256 initialSupply\r\n    ) ERC20(name, symbol) Ownable(msg.sender) {\r\n        _mint(msg.sender, initialSupply);\r\n    }\r\n\r\n    /**\r\n     * @dev Mint new tokens - useful for testing\r\n     * @param to Address to mint tokens to\r\n     * @param amount Amount of tokens to mint\r\n     */\r\n    function mint(address to, uint256 amount) external onlyOwner {\r\n        _mint(to, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Burn tokens from caller's balance\r\n     * @param amount Amount of tokens to burn\r\n     */\r\n    function burn(uint256 amount) external {\r\n        _burn(msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Burn tokens from specified account (with allowance)\r\n     * @param from Address to burn tokens from\r\n     * @param amount Amount of tokens to burn\r\n     */\r\n    function burnFrom(address from, uint256 amount) external {\r\n        _spendAllowance(from, msg.sender, amount);\r\n        _burn(from, amount);\r\n    }\r\n} "
    },
    "contracts/SimpleDAO.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\n/**\r\n * @title SimpleDAO\r\n * @dev A simple DAO contract with proposal creation, voting, and execution\r\n */\r\ncontract SimpleDAO is ReentrancyGuard, Ownable {\r\n    // Governance token\r\n    IERC20 public governanceToken;\r\n    \r\n    // Proposal structure\r\n    struct Proposal {\r\n        uint256 id;\r\n        address proposer;\r\n        string title;\r\n        string description;\r\n        address target;\r\n        uint256 value;\r\n        bytes data;\r\n        uint256 startTime;\r\n        uint256 endTime;\r\n        uint256 votesFor;\r\n        uint256 votesAgainst;\r\n        uint256 votesAbstain;\r\n        bool executed;\r\n        bool canceled;\r\n        ProposalState state;\r\n    }\r\n    \r\n    // Vote structure\r\n    struct Vote {\r\n        bool hasVoted;\r\n        VoteType voteType;\r\n        uint256 weight;\r\n        uint256 timestamp;\r\n    }\r\n    \r\n    // Enums\r\n    enum ProposalState { Pending, Active, Succeeded, Defeated, Executed, Canceled }\r\n    enum VoteType { Against, For, Abstain }\r\n    \r\n    // State variables\r\n    mapping(uint256 => Proposal) public proposals;\r\n    mapping(uint256 => mapping(address => Vote)) public votes;\r\n    mapping(address => uint256) public membershipTimestamp;\r\n    \r\n    uint256 public proposalCounter;\r\n    uint256 public votingDelay = 1 days; // Time before voting starts\r\n    uint256 public votingPeriod = 7 days; // Voting duration\r\n    uint256 public proposalThreshold = 1000 * 10**18; // Min tokens to propose\r\n    uint256 public quorumThreshold = 10; // 10% of total supply\r\n    uint256 public passingThreshold = 50; // 50% of votes needed to pass\r\n    \r\n    // Treasury\r\n    uint256 public treasuryBalance;\r\n    \r\n    // Events\r\n    event ProposalCreated(\r\n        uint256 indexed proposalId,\r\n        address indexed proposer,\r\n        string title,\r\n        uint256 startTime,\r\n        uint256 endTime\r\n    );\r\n    event VoteCast(\r\n        uint256 indexed proposalId,\r\n        address indexed voter,\r\n        VoteType voteType,\r\n        uint256 weight\r\n    );\r\n    event ProposalExecuted(uint256 indexed proposalId);\r\n    event ProposalCanceled(uint256 indexed proposalId);\r\n    event MemberJoined(address indexed member, uint256 timestamp);\r\n    event FundsDeposited(address indexed depositor, uint256 amount);\r\n    event FundsWithdrawn(address indexed recipient, uint256 amount);\r\n    \r\n    // Custom errors\r\n    error InsufficientTokens(uint256 required, uint256 actual);\r\n    error ProposalNotActive();\r\n    error AlreadyVoted();\r\n    error ProposalNotSucceeded();\r\n    error ProposalAlreadyExecuted();\r\n    error ExecutionFailed();\r\n    error NotAuthorized();\r\n    error InvalidProposal();\r\n    error InsufficientTreasuryFunds();\r\n    \r\n    /**\r\n     * @dev Constructor\r\n     * @param _governanceToken Address of the governance token\r\n     */\r\n    constructor(address _governanceToken) Ownable(msg.sender) {\r\n        require(_governanceToken != address(0), \"Invalid token address\");\r\n        governanceToken = IERC20(_governanceToken);\r\n        treasuryBalance = 0;\r\n    }\r\n    \r\n    /**\r\n     * @dev Join the DAO as a member\r\n     */\r\n    function joinDAO() external {\r\n        require(governanceToken.balanceOf(msg.sender) > 0, \"Must hold governance tokens\");\r\n        \r\n        if (membershipTimestamp[msg.sender] == 0) {\r\n            membershipTimestamp[msg.sender] = block.timestamp;\r\n            emit MemberJoined(msg.sender, block.timestamp);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev Create a new proposal\r\n     * @param title Proposal title\r\n     * @param description Proposal description\r\n     * @param target Target contract address (use address(0) for treasury operations)\r\n     * @param value ETH value to send\r\n     * @param data Call data\r\n     */\r\n    function createProposal(\r\n        string memory title,\r\n        string memory description,\r\n        address target,\r\n        uint256 value,\r\n        bytes memory data\r\n    ) public returns (uint256) {\r\n        uint256 proposerBalance = governanceToken.balanceOf(msg.sender);\r\n        if (proposerBalance < proposalThreshold) {\r\n            revert InsufficientTokens(proposalThreshold, proposerBalance);\r\n        }\r\n        \r\n        require(membershipTimestamp[msg.sender] != 0, \"Must be a DAO member\");\r\n        require(bytes(title).length > 0, \"Title cannot be empty\");\r\n        \r\n        uint256 proposalId = proposalCounter++;\r\n        uint256 startTime = block.timestamp + votingDelay;\r\n        uint256 endTime = startTime + votingPeriod;\r\n        \r\n        proposals[proposalId] = Proposal({\r\n            id: proposalId,\r\n            proposer: msg.sender,\r\n            title: title,\r\n            description: description,\r\n            target: target,\r\n            value: value,\r\n            data: data,\r\n            startTime: startTime,\r\n            endTime: endTime,\r\n            votesFor: 0,\r\n            votesAgainst: 0,\r\n            votesAbstain: 0,\r\n            executed: false,\r\n            canceled: false,\r\n            state: ProposalState.Pending\r\n        });\r\n        \r\n        emit ProposalCreated(proposalId, msg.sender, title, startTime, endTime);\r\n        return proposalId;\r\n    }\r\n    \r\n    /**\r\n     * @dev Cast a vote on a proposal\r\n     * @param proposalId Proposal ID to vote on\r\n     * @param voteType Vote type (0=Against, 1=For, 2=Abstain)\r\n     */\r\n    function castVote(uint256 proposalId, VoteType voteType) external {\r\n        Proposal storage proposal = proposals[proposalId];\r\n        \r\n        require(proposal.proposer != address(0), \"Proposal does not exist\");\r\n        require(block.timestamp >= proposal.startTime, \"Voting not started\");\r\n        require(block.timestamp <= proposal.endTime, \"Voting ended\");\r\n        require(membershipTimestamp[msg.sender] != 0, \"Must be a DAO member\");\r\n        \r\n        Vote storage vote = votes[proposalId][msg.sender];\r\n        if (vote.hasVoted) revert AlreadyVoted();\r\n        \r\n        uint256 weight = governanceToken.balanceOf(msg.sender);\r\n        require(weight > 0, \"No voting power\");\r\n        \r\n        vote.hasVoted = true;\r\n        vote.voteType = voteType;\r\n        vote.weight = weight;\r\n        vote.timestamp = block.timestamp;\r\n        \r\n        if (voteType == VoteType.For) {\r\n            proposal.votesFor += weight;\r\n        } else if (voteType == VoteType.Against) {\r\n            proposal.votesAgainst += weight;\r\n        } else {\r\n            proposal.votesAbstain += weight;\r\n        }\r\n        \r\n        emit VoteCast(proposalId, msg.sender, voteType, weight);\r\n    }\r\n    \r\n    /**\r\n     * @dev Execute a successful proposal\r\n     * @param proposalId Proposal ID to execute\r\n     */\r\n    function executeProposal(uint256 proposalId) external nonReentrant {\r\n        Proposal storage proposal = proposals[proposalId];\r\n        \r\n        require(proposal.proposer != address(0), \"Proposal does not exist\");\r\n        require(!proposal.executed, \"Already executed\");\r\n        require(!proposal.canceled, \"Proposal canceled\");\r\n        require(block.timestamp > proposal.endTime, \"Voting still active\");\r\n        \r\n        // Check if proposal succeeded\r\n        uint256 totalVotes = proposal.votesFor + proposal.votesAgainst + proposal.votesAbstain;\r\n        uint256 totalSupply = governanceToken.totalSupply();\r\n        uint256 quorumRequired = (totalSupply * quorumThreshold) / 100;\r\n        \r\n        require(totalVotes >= quorumRequired, \"Quorum not reached\");\r\n        \r\n        uint256 passingVotes = (totalVotes * passingThreshold) / 100;\r\n        require(proposal.votesFor > passingVotes, \"Proposal defeated\");\r\n        \r\n        proposal.executed = true;\r\n        proposal.state = ProposalState.Executed;\r\n        \r\n        // Execute the proposal\r\n        if (proposal.target == address(0)) {\r\n            // Treasury operation\r\n            if (proposal.value > 0) {\r\n                require(treasuryBalance >= proposal.value, \"Insufficient treasury funds\");\r\n                treasuryBalance -= proposal.value;\r\n                \r\n                // Decode recipient from data\r\n                address recipient = abi.decode(proposal.data, (address));\r\n                payable(recipient).transfer(proposal.value);\r\n                emit FundsWithdrawn(recipient, proposal.value);\r\n            }\r\n        } else {\r\n            // External contract call\r\n            (bool success, ) = proposal.target.call{value: proposal.value}(proposal.data);\r\n            if (!success) revert ExecutionFailed();\r\n        }\r\n        \r\n        emit ProposalExecuted(proposalId);\r\n    }\r\n    \r\n    /**\r\n     * @dev Cancel a proposal (only proposer or owner can cancel)\r\n     * @param proposalId Proposal ID to cancel\r\n     */\r\n    function cancelProposal(uint256 proposalId) external {\r\n        Proposal storage proposal = proposals[proposalId];\r\n        \r\n        require(proposal.proposer != address(0), \"Proposal does not exist\");\r\n        require(!proposal.executed, \"Already executed\");\r\n        require(!proposal.canceled, \"Already canceled\");\r\n        require(\r\n            msg.sender == proposal.proposer || msg.sender == owner(),\r\n            \"Not authorized to cancel\"\r\n        );\r\n        \r\n        proposal.canceled = true;\r\n        proposal.state = ProposalState.Canceled;\r\n        \r\n        emit ProposalCanceled(proposalId);\r\n    }\r\n    \r\n    /**\r\n     * @dev Create a treasury withdrawal proposal\r\n     * @param recipient Address to send funds to\r\n     * @param amount Amount to withdraw\r\n     * @param title Proposal title\r\n     * @param description Proposal description\r\n     */\r\n    function createTreasuryWithdrawalProposal(\r\n        address recipient,\r\n        uint256 amount,\r\n        string memory title,\r\n        string memory description\r\n    ) external returns (uint256) {\r\n        require(amount <= treasuryBalance, \"Amount exceeds treasury balance\");\r\n        require(recipient != address(0), \"Invalid recipient\");\r\n        \r\n        bytes memory data = abi.encode(recipient);\r\n        return createProposal(title, description, address(0), amount, data);\r\n    }\r\n    \r\n    /**\r\n     * @dev Deposit funds to treasury\r\n     */\r\n    function depositToTreasury() external payable {\r\n        require(msg.value > 0, \"Must send ETH\");\r\n        treasuryBalance += msg.value;\r\n        emit FundsDeposited(msg.sender, msg.value);\r\n    }\r\n    \r\n    // View functions\r\n    \r\n    /**\r\n     * @dev Get proposal details\r\n     * @param proposalId Proposal ID\r\n     * @return Proposal struct\r\n     */\r\n    function getProposal(uint256 proposalId) external view returns (Proposal memory) {\r\n        return proposals[proposalId];\r\n    }\r\n    \r\n    /**\r\n     * @dev Get current proposal state\r\n     * @param proposalId Proposal ID\r\n     * @return ProposalState Current state\r\n     */\r\n    function getProposalState(uint256 proposalId) external view returns (ProposalState) {\r\n        Proposal storage proposal = proposals[proposalId];\r\n        \r\n        if (proposal.canceled) return ProposalState.Canceled;\r\n        if (proposal.executed) return ProposalState.Executed;\r\n        if (block.timestamp < proposal.startTime) return ProposalState.Pending;\r\n        if (block.timestamp <= proposal.endTime) return ProposalState.Active;\r\n        \r\n        // Check if succeeded\r\n        uint256 totalVotes = proposal.votesFor + proposal.votesAgainst + proposal.votesAbstain;\r\n        uint256 totalSupply = governanceToken.totalSupply();\r\n        uint256 quorumRequired = (totalSupply * quorumThreshold) / 100;\r\n        \r\n        if (totalVotes < quorumRequired) return ProposalState.Defeated;\r\n        \r\n        uint256 passingVotes = (totalVotes * passingThreshold) / 100;\r\n        if (proposal.votesFor > passingVotes) return ProposalState.Succeeded;\r\n        \r\n        return ProposalState.Defeated;\r\n    }\r\n    \r\n    /**\r\n     * @dev Get vote details for a user on a proposal\r\n     * @param proposalId Proposal ID\r\n     * @param voter Voter address\r\n     * @return Vote struct\r\n     */\r\n    function getVote(uint256 proposalId, address voter) external view returns (Vote memory) {\r\n        return votes[proposalId][voter];\r\n    }\r\n    \r\n    /**\r\n     * @dev Get voting power of an address\r\n     * @param account Address to check\r\n     * @return uint256 Voting power (token balance)\r\n     */\r\n    function getVotingPower(address account) external view returns (uint256) {\r\n        return governanceToken.balanceOf(account);\r\n    }\r\n    \r\n    /**\r\n     * @dev Check if address is a DAO member\r\n     * @param account Address to check\r\n     * @return bool True if member\r\n     */\r\n    function isMember(address account) external view returns (bool) {\r\n        return membershipTimestamp[account] != 0;\r\n    }\r\n    \r\n    /**\r\n     * @dev Get proposal voting results\r\n     * @param proposalId Proposal ID\r\n     * @return votesFor Votes in favor\r\n     * @return votesAgainst Votes against\r\n     * @return votesAbstain Abstain votes\r\n     * @return totalVotes Total votes cast\r\n     */\r\n    function getVotingResults(uint256 proposalId) external view returns (\r\n        uint256 votesFor,\r\n        uint256 votesAgainst,\r\n        uint256 votesAbstain,\r\n        uint256 totalVotes\r\n    ) {\r\n        Proposal storage proposal = proposals[proposalId];\r\n        votesFor = proposal.votesFor;\r\n        votesAgainst = proposal.votesAgainst;\r\n        votesAbstain = proposal.votesAbstain;\r\n        totalVotes = votesFor + votesAgainst + votesAbstain;\r\n    }\r\n    \r\n    /**\r\n     * @dev Get DAO settings\r\n     * @return _votingDelay Voting delay in seconds\r\n     * @return _votingPeriod Voting period in seconds\r\n     * @return _proposalThreshold Minimum tokens required to create a proposal\r\n     * @return _quorumThreshold Quorum threshold percentage\r\n     * @return _passingThreshold Passing threshold percentage\r\n     * @return _treasuryBalance Current treasury balance\r\n     */\r\n    function getDAOSettings() external view returns (\r\n        uint256 _votingDelay,\r\n        uint256 _votingPeriod,\r\n        uint256 _proposalThreshold,\r\n        uint256 _quorumThreshold,\r\n        uint256 _passingThreshold,\r\n        uint256 _treasuryBalance\r\n    ) {\r\n        return (\r\n            votingDelay,\r\n            votingPeriod,\r\n            proposalThreshold,\r\n            quorumThreshold,\r\n            passingThreshold,\r\n            treasuryBalance\r\n        );\r\n    }\r\n    \r\n    // Owner functions for governance parameter updates\r\n    \r\n    /**\r\n     * @dev Update voting delay\r\n     * @param newDelay New voting delay in seconds\r\n     */\r\n    function setVotingDelay(uint256 newDelay) external onlyOwner {\r\n        require(newDelay <= 30 days, \"Delay too long\");\r\n        votingDelay = newDelay;\r\n    }\r\n    \r\n    /**\r\n     * @dev Update voting period\r\n     * @param newPeriod New voting period in seconds\r\n     */\r\n    function setVotingPeriod(uint256 newPeriod) external onlyOwner {\r\n        require(newPeriod >= 1 days && newPeriod <= 30 days, \"Invalid period\");\r\n        votingPeriod = newPeriod;\r\n    }\r\n    \r\n    /**\r\n     * @dev Update proposal threshold\r\n     * @param newThreshold New proposal threshold in tokens\r\n     */\r\n    function setProposalThreshold(uint256 newThreshold) external onlyOwner {\r\n        proposalThreshold = newThreshold;\r\n    }\r\n    \r\n    /**\r\n     * @dev Update quorum threshold\r\n     * @param newThreshold New quorum threshold percentage (1-100)\r\n     */\r\n    function setQuorumThreshold(uint256 newThreshold) external onlyOwner {\r\n        require(newThreshold > 0 && newThreshold <= 100, \"Invalid threshold\");\r\n        quorumThreshold = newThreshold;\r\n    }\r\n    \r\n    /**\r\n     * @dev Update passing threshold\r\n     * @param newThreshold New passing threshold percentage (1-100)\r\n     */\r\n    function setPassingThreshold(uint256 newThreshold) external onlyOwner {\r\n        require(newThreshold > 0 && newThreshold <= 100, \"Invalid threshold\");\r\n        passingThreshold = newThreshold;\r\n    }\r\n    \r\n    /**\r\n     * @dev Get total number of proposals\r\n     * @return uint256 Total proposal count\r\n     */\r\n    function getTotalProposals() external view returns (uint256) {\r\n        return proposalCounter;\r\n    }\r\n    \r\n    /**\r\n     * @dev Receive function to accept ETH deposits\r\n     */\r\n    receive() external payable {\r\n        treasuryBalance += msg.value;\r\n        emit FundsDeposited(msg.sender, msg.value);\r\n    }\r\n}"
    }
  },
  "settings": {
    "viaIR": true,
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}