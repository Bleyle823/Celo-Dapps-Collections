{
  "language": "Solidity",
  "sources": {
    "contracts/SimpleMultisig.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\n\r\ncontract SimpleMultisig {\r\n    // Events\r\n    event Deposit(address indexed sender, uint256 amount, uint256 balance);\r\n    event SubmitTransaction(\r\n        address indexed owner,\r\n        uint256 indexed txIndex,\r\n        address indexed to,\r\n        uint256 value,\r\n        bytes data\r\n    );\r\n    event ConfirmTransaction(address indexed owner, uint256 indexed txIndex);\r\n    event RevokeConfirmation(address indexed owner, uint256 indexed txIndex);\r\n    event ExecuteTransaction(address indexed owner, uint256 indexed txIndex);\r\n\r\n    // State variables\r\n    address[] public owners;\r\n    mapping(address => bool) public isOwner;\r\n    uint256 public numConfirmationsRequired;\r\n\r\n    struct Transaction {\r\n        address to;\r\n        uint256 value;\r\n        bytes data;\r\n        bool executed;\r\n        uint256 numConfirmations;\r\n    }\r\n\r\n    // Mapping from tx index => owner => bool\r\n    mapping(uint256 => mapping(address => bool)) public isConfirmed;\r\n    Transaction[] public transactions;\r\n\r\n    // Modifiers\r\n    modifier onlyOwner() {\r\n        require(isOwner[msg.sender], \"Not an owner\");\r\n        _;\r\n    }\r\n\r\n    modifier txExists(uint256 _txIndex) {\r\n        require(_txIndex < transactions.length, \"Transaction does not exist\");\r\n        _;\r\n    }\r\n\r\n    modifier notExecuted(uint256 _txIndex) {\r\n        require(!transactions[_txIndex].executed, \"Transaction already executed\");\r\n        _;\r\n    }\r\n\r\n    modifier notConfirmed(uint256 _txIndex) {\r\n        require(!isConfirmed[_txIndex][msg.sender], \"Transaction already confirmed\");\r\n        _;\r\n    }\r\n\r\n    // Constructor\r\n    constructor(address[] memory _owners, uint256 _numConfirmationsRequired) {\r\n        require(_owners.length > 0, \"Owners required\");\r\n        require(\r\n            _numConfirmationsRequired > 0 && _numConfirmationsRequired <= _owners.length,\r\n            \"Invalid number of required confirmations\"\r\n        );\r\n\r\n        for (uint256 i = 0; i < _owners.length; i++) {\r\n            address owner = _owners[i];\r\n            require(owner != address(0), \"Invalid owner\");\r\n            require(!isOwner[owner], \"Owner not unique\");\r\n\r\n            isOwner[owner] = true;\r\n            owners.push(owner);\r\n        }\r\n\r\n        numConfirmationsRequired = _numConfirmationsRequired;\r\n    }\r\n\r\n    // Receive function to accept ETH deposits\r\n    receive() external payable {\r\n        emit Deposit(msg.sender, msg.value, address(this).balance);\r\n    }\r\n\r\n    // Submit a transaction for approval\r\n    function submitTransaction(\r\n        address _to,\r\n        uint256 _value,\r\n        bytes memory _data\r\n    ) public onlyOwner {\r\n        uint256 txIndex = transactions.length;\r\n\r\n        transactions.push(\r\n            Transaction({\r\n                to: _to,\r\n                value: _value,\r\n                data: _data,\r\n                executed: false,\r\n                numConfirmations: 0\r\n            })\r\n        );\r\n\r\n        emit SubmitTransaction(msg.sender, txIndex, _to, _value, _data);\r\n    }\r\n\r\n    // Confirm a transaction\r\n    function confirmTransaction(uint256 _txIndex)\r\n        public\r\n        onlyOwner\r\n        txExists(_txIndex)\r\n        notExecuted(_txIndex)\r\n        notConfirmed(_txIndex)\r\n    {\r\n        Transaction storage transaction = transactions[_txIndex];\r\n        transaction.numConfirmations += 1;\r\n        isConfirmed[_txIndex][msg.sender] = true;\r\n\r\n        emit ConfirmTransaction(msg.sender, _txIndex);\r\n    }\r\n\r\n    // Execute a transaction\r\n    function executeTransaction(uint256 _txIndex)\r\n        public\r\n        onlyOwner\r\n        txExists(_txIndex)\r\n        notExecuted(_txIndex)\r\n    {\r\n        Transaction storage transaction = transactions[_txIndex];\r\n\r\n        require(\r\n            transaction.numConfirmations >= numConfirmationsRequired,\r\n            \"Cannot execute transaction - insufficient confirmations\"\r\n        );\r\n\r\n        transaction.executed = true;\r\n\r\n        (bool success, ) = transaction.to.call{value: transaction.value}(\r\n            transaction.data\r\n        );\r\n        require(success, \"Transaction failed\");\r\n\r\n        emit ExecuteTransaction(msg.sender, _txIndex);\r\n    }\r\n\r\n    // Revoke confirmation\r\n    function revokeConfirmation(uint256 _txIndex)\r\n        public\r\n        onlyOwner\r\n        txExists(_txIndex)\r\n        notExecuted(_txIndex)\r\n    {\r\n        Transaction storage transaction = transactions[_txIndex];\r\n\r\n        require(isConfirmed[_txIndex][msg.sender], \"Transaction not confirmed\");\r\n\r\n        transaction.numConfirmations -= 1;\r\n        isConfirmed[_txIndex][msg.sender] = false;\r\n\r\n        emit RevokeConfirmation(msg.sender, _txIndex);\r\n    }\r\n\r\n    // View functions\r\n    function getOwners() public view returns (address[] memory) {\r\n        return owners;\r\n    }\r\n\r\n    function getTransactionCount() public view returns (uint256) {\r\n        return transactions.length;\r\n    }\r\n\r\n    function getTransaction(uint256 _txIndex)\r\n        public\r\n        view\r\n        returns (\r\n            address to,\r\n            uint256 value,\r\n            bytes memory data,\r\n            bool executed,\r\n            uint256 numConfirmations\r\n        )\r\n    {\r\n        Transaction storage transaction = transactions[_txIndex];\r\n\r\n        return (\r\n            transaction.to,\r\n            transaction.value,\r\n            transaction.data,\r\n            transaction.executed,\r\n            transaction.numConfirmations\r\n        );\r\n    }\r\n\r\n    function getBalance() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}